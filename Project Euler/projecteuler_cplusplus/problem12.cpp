//
//  problem12.cpp
//  projecteuler_1
//
//  Created by Nikhil Jain on 10/23/15.
//  Copyright Â© 2015 Nikhil Jain. All rights reserved.
//

/*
 
 Problem 12
 
 */

//
//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//Let us list the factors of the first seven triangle numbers:
//
//1: 1
//3: 1,3
//6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.
//
//What is the value of the first triangle number to have over five hundred divisors?

#include <iostream>
#include <vector>
#include <math.h>
using namespace std;

/*
 Takes forever to run, need to optimize it
 */

// gets prime factors currently
int getDivisors(long long num) {
    
    int divisors = 0;
    
    for (long long i = 1; i <= sqrt ((float) num); i++)
        if (num % i == 0) {
            divisors = divisors + 2;    // all divisors come in pairs
//            cout << i << " ";
        }
    
    return divisors;
    
}

int main() {
    
//    cout << getDivisors(12);
    
    int numOfDivisors = 0;
    long long currentNum = 1; // will be the 'sequence' of natural nums (just the last number)
    long long counter = 1;
    
    do {
        counter++;
        
        // check how many divisors it has
        numOfDivisors = getDivisors(currentNum);
        
        if (numOfDivisors < 500) {
            currentNum += counter;
        }
        
        cout << currentNum << " has " << numOfDivisors << " divisors" << endl;
        
    }
    while (numOfDivisors < 501);
    
//    cout << currentNum << " is the answer with " << numOfDivisors << " divisors" << endl;
    
    return 1;
}



